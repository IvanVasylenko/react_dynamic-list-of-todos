{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","this","props","todos","onSelectedUser","className","map","todo","key","id","classNames","completed","type","readOnly","title","onClick","userId","React","PureComponent","BASE_URL","CurrentUser","state","user","loadUser","prevProps","fetch","then","response","json","data","setState","name","email","phone","Component","App","selectedUserId","query","status","selectUser","hendlerChange","event","target","value","getVisibleTodos","normalizedQuery","toLowerCase","filter","includes","getComplitedTodos","prepairTodos","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77a6cc48.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.PureComponent {\n  render() {\n    const { todos, onSelectedUser } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  }\n                )}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => onSelectedUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  }).isRequired,\n  onSelectedUser: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = () => (\n  fetch(`${BASE_URL}/todos`)\n    .then(response => response.json())\n);\n\nexport const getUser = id => (\n  fetch(`${BASE_URL}/users/${id}`)\n    .then(response => response.json())\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser() {\n    getUser(this.props.userId)\n      .then(data => this.setState({\n        user: data.data,\n      }));\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {this.props.userId}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => this.props.onSelectedUser(0)}\n          className=\"CurrentUser__button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    status: 'all',\n  };\n\n  componentDidMount() {\n    getTodos().then((data) => {\n      this.setState({\n        todos: data.data,\n      });\n    });\n  }\n\n  selectUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  hendlerChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  getVisibleTodos = (todos) => {\n    const normalizedQuery = this.state.query.toLowerCase();\n\n    return todos.filter(\n      (todo) => {\n        if (todo.title === null) {\n          return;\n        }\n\n        return todo.title.toLowerCase().includes(normalizedQuery); // eslint-disable-line\n      },\n    );\n  }\n\n  getComplitedTodos = todos => todos.filter(\n    (todo) => {\n      switch (this.state.status) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return true;\n      }\n    },\n  )\n\n  render() {\n    const { selectedUserId, query, todos } = this.state;\n\n    const prepairTodos = this.getComplitedTodos(this.getVisibleTodos(todos));\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n\n          <div className=\"App__filter\">\n\n            <p>Search</p>\n            <input\n              type=\"text\"\n              name=\"query\"\n              value={query}\n              onChange={this.hendlerChange}\n            />\n\n            <select\n              name=\"status\"\n              onChange={this.hendlerChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed </option>\n            </select>\n          </div>\n\n          <TodoList\n            todos={prepairTodos}\n            onSelectedUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onSelectedUser={this.selectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}